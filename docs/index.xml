<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Always a Work in Progress</title>
    <link>http://andreimihu.com/</link>
    <description>Recent content on Always a Work in Progress</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andreimihu.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bulk unit testing with Elixir macros</title>
      <link>http://andreimihu.com/blog/2014/09/18/bulk-unit-testing-with-elixir-macros/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2014/09/18/bulk-unit-testing-with-elixir-macros/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s plenty written on how to choose the best targets for unit testing, how far to take it, best practices for layout and test structure, and much more - so I won&amp;rsquo;t discuss that.&lt;/p&gt;

&lt;p&gt;I also won&amp;rsquo;t touch on when to use macros in general - that&amp;rsquo;s covered quite well in the &lt;a href=&#34;http://elixir-lang.org/getting_started/meta/2.html&#34;&gt;Macros&lt;/a&gt; part of the &lt;a href=&#34;http://elixir-lang.org/getting_started/1.html&#34;&gt;Elixir Getting Started guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is about what you could do &lt;em&gt;after&lt;/em&gt; you&amp;rsquo;ve chosen the scope of your testing, but even &lt;a href=&#34;http://elixir-lang.org/docs/stable/ex_unit/&#34;&gt;ExUnit&lt;/a&gt; macros like &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;assert&lt;/code&gt; become too verbose through sheer weight of input/output scenarios mapped to individual tests.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the approach I found is the neatest way to structure those tests.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;input:0491e687756f4723256d4837e9fc00cc&#34;&gt;Input&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll list the inputs and their corresponding expected outputs in a text file, let&amp;rsquo;s say &lt;code&gt;test/input.txt&lt;/code&gt; to keep it short, which looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-no-highlight&#34;&gt;MyModule.my_function/1 a scenario || an input string || [an: :expected, output: &amp;lt;&amp;lt;1, 2, 3&amp;gt;&amp;gt;]
MyModule.my_function/1 another scenario || another input string || [another: :expected, output: &amp;lt;&amp;lt;4, 5, 6&amp;gt;&amp;gt;]
[ ... ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each line follows this format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test case name &amp;lt;separator&amp;gt; input &amp;lt;separator&amp;gt; expected output&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-tests:0491e687756f4723256d4837e9fc00cc&#34;&gt;The tests&lt;/h3&gt;

&lt;p&gt;Directly in the &lt;code&gt;test/my_module_test.exs&lt;/code&gt; file you&amp;rsquo;d have this snippet, outside of any functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;for line &amp;lt;- File.stream!(Path.join([__DIR__, &amp;quot;input.txt&amp;quot;]), [], :line) do
  [name, input, expected] =
    line |&amp;gt; String.split(&amp;quot;||&amp;quot;) |&amp;gt; Enum.map(&amp;amp;String.strip(&amp;amp;1))
  test name do
    {expected, []} = Code.eval_string(unquote(expected))
    result = MyModule.my_function(unquote(input))
    assert ^expected = result
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each line in the input text file:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Split the line into its components: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;expected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new test case named &lt;code&gt;name&lt;/code&gt;, which:

&lt;ul&gt;
&lt;li&gt;Converts &lt;code&gt;expected&lt;/code&gt; into Elixir terms using &lt;code&gt;Code.eval_string/1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Runs the function being tested, passing it the argument &lt;code&gt;input&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Compares the actual result and the expected one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Code.eval_string/1&lt;/code&gt; is used to process complex values, like the keyword list expected output. Note that it&amp;rsquo;s not needed for the input because that&amp;rsquo;s a simple string in this example.&lt;/p&gt;

&lt;p&gt;In this example if we compare the expected output with the actual result without &lt;code&gt;Code.eval_string/1&lt;/code&gt; we&amp;rsquo;d be comparing a keyword list with a string representation of a keyword list, and it would always fail!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;benefits:0491e687756f4723256d4837e9fc00cc&#34;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Concise!&lt;/strong&gt; The main reason we&amp;rsquo;re going through this trouble. This saves a fair bit of time and test clutter compared to manually writing out each input/output scenario as a test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Individual tests with their own names.&lt;/strong&gt; This is why one of the fields in the input text file is the test name. You get precise feedback about which cases are failing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tests fail independently.&lt;/strong&gt; Because each line translates to a separate test, each one runs independently. If we were looping through the lines and running them with a private helper function, it would stop on the first failure!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accurate test count.&lt;/strong&gt; You&amp;rsquo;ll get a better idea of your test count and coverage when each input/output scenario is its own test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easily scales to multiple functions.&lt;/strong&gt; If testing multiple functions, their individual test data is abstracted away in separate input text files and the &lt;code&gt;test.exs&lt;/code&gt; stays compact.&lt;/p&gt;

&lt;p&gt;Feel free to drop a message below if you have a better solution, or would like to add anything!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goodbye Octopress, Hello Hugo!</title>
      <link>http://andreimihu.com/blog/2014/08/11/goodbye-octopress-hello-hugo/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2014/08/11/goodbye-octopress-hello-hugo/</guid>
      <description>

&lt;p&gt;When I first set up my little site and blog I had a look around at solutions that would meet a few simple requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Easy to set up.&lt;/strong&gt; I didn&amp;rsquo;t want to dedicate a big chunk of time to get it running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to keep going.&lt;/strong&gt; Even more than the first point, I didn&amp;rsquo;t want a huge ongoing maintenance burden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compact and fast.&lt;/strong&gt; There&amp;rsquo;s a lot I can say about either of these points, but the basic idea was to have a snappy site with quick load times and low hosting costs.&lt;/li&gt;
&lt;li&gt;A number of other things like offline writing and testing, simple uploading of new posts and site changes, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Static site generators easily ticked all of the boxes: offline writing, &lt;code&gt;rsync&lt;/code&gt; for deployment, no backend to run on the server, pages load as fast as you can deliver a text file etc - sounds like a dream! &lt;a href=&#34;http://staticsitegenerators.net/&#34;&gt;The choices are staggering, too!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bit more searching and I ended up with &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; and its many skins, plugins and helpful tutorials. A day&amp;rsquo;s work or so and I was up and running. It was a smooth process, easy to deploy and get things looking as I wanted.&lt;/p&gt;

&lt;p&gt;So far so good! So what made me switch to &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; less than a year later?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;unconvincing-update-story:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Unconvincing update story&lt;/h3&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just me, but it seems wrong for the standard site setup to involve forking the &lt;a href=&#34;https://github.com/imathis/octopress&#34;&gt;main Octopress repo&lt;/a&gt; and every now and again merging from upstream to stay up to date. You &lt;em&gt;should&lt;/em&gt; be fine if you don&amp;rsquo;t touch any of the standard files and edit only your pages - but this adds an artificial barrier to tweaking behaviour, since the only way to tie in your own &lt;code&gt;rake&lt;/code&gt; tasks is to crack open the &lt;code&gt;Rakefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also non-trivial to override theme behaviour. There&amp;rsquo;s a recommended way to organise your overrides, but since the theme is cloned elsewhere, then copied to your &lt;code&gt;source&lt;/code&gt; path, it&amp;rsquo;s all too easy to edit those files instead. Then the built-in update process backs up your sources, gives you new ones, then tries to copy your content and overrides back in? I&amp;rsquo;m afraid they lost me partway through - maybe I went wrong somewhere, but it would be a bit more manageable if they&amp;rsquo;d given me a bit less rope, so to speak.&lt;/p&gt;

&lt;p&gt;This is where it started failing the &lt;strong&gt;easy to keep going&lt;/strong&gt; criteria, and I started having doubts.&lt;/p&gt;

&lt;h3 id=&#34;ruby-gems-headache:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Ruby gems headache&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m not a Ruby developer, but I&amp;rsquo;ve been quite impressed with how quick it is to pick up and start hacking with. I can see why a lot of really neat tools and libraries are Ruby-based, and I&amp;rsquo;d happily use them more often. But the &lt;code&gt;gem&lt;/code&gt; system has let me down.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had to set up and work with a number of Ruby projects, and I started getting issues with gem versions being incorrect. Globally installed, &lt;em&gt;versioned&lt;/em&gt; dependencies strike me as a bad idea, to be honest. What should be relatively small, single-purpose, &lt;em&gt;isolated&lt;/em&gt; batch tools are now fighting to control the state of these resources in a shared space. I&amp;rsquo;ve had some success using &lt;code&gt;exec&lt;/code&gt; but it&amp;rsquo;s still an unnecessary overhead.&lt;/p&gt;

&lt;p&gt;In a strange way this came back around to being &lt;strong&gt;easy to set up&lt;/strong&gt;. After a different project updated some gems, Octopress was refusing to run. In fact, any Ruby-based site generator would have probably failed me here.&lt;/p&gt;

&lt;h3 id=&#34;cluttered-internals:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Cluttered internals&lt;/h3&gt;

&lt;p&gt;Octopress isn&amp;rsquo;t so much a tool as a collection of tools tied together through &lt;code&gt;rake&lt;/code&gt; tasks. This works well up to a point. But then I noticed that whenever the &lt;code&gt;watch&lt;/code&gt; task was stopped, it would sometimes fail to stop its child &lt;code&gt;compass&lt;/code&gt; process - one example of many.&lt;/p&gt;

&lt;p&gt;In my previous blog posts I experimented with plugins to modify behaviour at site generation time. There&amp;rsquo;s nothing more frustrating than finding you can&amp;rsquo;t change some specific pattern because of the way Octopress calls the process responsible for that resource.&lt;/p&gt;

&lt;p&gt;From my own experience I&amp;rsquo;ve found it&amp;rsquo;s usually far more manageable to have a single plugin-friendly tool doing the work, rather than coordinating a set of processes. &lt;strong&gt;Easy to set up&lt;/strong&gt; and &lt;strong&gt;easy to keep going&lt;/strong&gt; are both looking increasingly shaky.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In contrast to my points above &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much faster - the Go implementation has an easily visible impact.&lt;/li&gt;
&lt;li&gt;No dependencies to sort out and keep in line.&lt;/li&gt;
&lt;li&gt;More opinionated theme integration approach and project structure - it was very easy to set up &lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;Hyde-X&lt;/a&gt;, my own theme variant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, I have to admit I miss a few things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The abundance of plugins and pipeline tools.&lt;/li&gt;
&lt;li&gt;The variety of themes.&lt;/li&gt;
&lt;li&gt;The community resources.&lt;/li&gt;
&lt;li&gt;Pagination, which I find to be a strange omission.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo is far from perfect, but so far I like how it&amp;rsquo;s shaping up. I&amp;rsquo;ll probably write a follow-up blog post at some point down the line after I&amp;rsquo;ve lived with it for a while, and we&amp;rsquo;ll see if I&amp;rsquo;m still as enthusiastic about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://andreimihu.com/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/about/</guid>
      <description>

&lt;p&gt;Hi, I&amp;rsquo;m Andrei! I&amp;rsquo;m a software engineer and entrepreneur living and working in London.&lt;/p&gt;

&lt;p&gt;I work mostly in &lt;a href=&#34;http://elixir-lang.org&#34;&gt;Elixir&lt;/a&gt;, Erlang, and Java. I like to throw in &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; and whatever else will make my life easier.&lt;/p&gt;

&lt;p&gt;My main interest is in server-side technology and massive scalability, but I&amp;rsquo;ve been known to dabble in native mobile development, user facing web applications and various other projects.&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href=&#34;https://github.com/zyro&#34;&gt;GitHub page&lt;/a&gt; to see what I&amp;rsquo;ve been up to recently!&lt;/p&gt;

&lt;h3 id=&#34;contact:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Contact&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to get in touch, you can find me on &lt;a href=&#34;http://www.linkedin.com/in/andreimihu&#34;&gt;LinkedIn&lt;/a&gt; or reach me at hello@andreimihu.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://andreimihu.com/license/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/license/</guid>
      <description>

&lt;h3 id=&#34;content-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Copyright 2013-2014 Andrei Mihu

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Octopress: Parallel resource processing</title>
      <link>http://andreimihu.com/blog/2014/02/24/octopress-parallel-resource-processing/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2014/02/24/octopress-parallel-resource-processing/</guid>
      <description>

&lt;p&gt;A while back I wrote about &lt;a href=&#34;http://andreimihu.com/blog/2013/11/16/octopress-minify-html-css-and-js/&#34;&gt;minifying resources in Octopress&lt;/a&gt; to improve page weight and load speed. A few extra dependencies and a little bit of additional Ruby code allowed the standard deployment task to minify HTML, CSS and JavaScript files before uploading them to the target server.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a great place to start making an already speedy static site even faster and lighter, but there was no special attention paid to what would happen as the number of pages grew with time. Octopress does allow working on blog posts in isolation, to avoid waiting to long when working in local preview mode, but at some point all of that content must be published.&lt;/p&gt;

&lt;p&gt;Enter parallelisation!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-problem:a425d7c31e30382749623fcbe2a12b59&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Left as they are, the built-in &lt;code&gt;rake&lt;/code&gt; tasks will dutifully process all of the resources in the &lt;code&gt;source&lt;/code&gt; folder one at a time. This is likely to keep the average blogger in business for a decent amount of time, but what happens when this starts taking too long?&lt;/p&gt;

&lt;p&gt;Obviously there are limits to how much is reasonable to do on a single thread before the site generation or deployment time reaches &amp;lsquo;inconvenient&amp;rsquo; and keeps right on climbing!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nathanleclaire.com/&#34;&gt;Nathan LeClaire&lt;/a&gt; got in touch about this very issue and suggested the nifty &lt;a href=&#34;https://github.com/grosser/parallel&#34;&gt;Parallel&lt;/a&gt; library, so I took it for a spin.&lt;/p&gt;

&lt;h3 id=&#34;a-solution-appears:a425d7c31e30382749623fcbe2a12b59&#34;&gt;A solution appears!&lt;/h3&gt;

&lt;p&gt;Parallel makes it very easy to gracefully spin out any given bit of Ruby into its own thread or process. For the purposes of this post, I&amp;rsquo;ll look at using it in the context of the resource minification I detailed previously.&lt;/p&gt;

&lt;p&gt;The initial setup is straightforward as usual. Add the new dependency to the &lt;code&gt;Gemfile&lt;/code&gt;, using the most up-to-date version available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;parallel&#39;, &#39;~&amp;gt; 0.9.2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And ensure it&amp;rsquo;s included at the top of the &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;parallel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that a very small code change transforms the additional tasks in the &lt;code&gt;Rakefile&lt;/code&gt; into:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &amp;quot;Minify CSS&amp;quot;
task :minify_css do
  compressor = YUI::CssCompressor.new
  Parallel.map(Dir.glob(&amp;quot;#{public_dir}/**/*.css&amp;quot;), :in_threads=&amp;gt;3) do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end

desc &amp;quot;Minify JS&amp;quot;
task :minify_js do
  compressor = YUI::JavaScriptCompressor.new
  Parallel.map(Dir.glob(&amp;quot;#{public_dir}/**/*.js&amp;quot;), :in_threads=&amp;gt;3) do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end

desc &amp;quot;Minify HTML&amp;quot;
task :minify_html do
  compressor = HtmlCompressor::HtmlCompressor.new
  Parallel.map(Dir.glob(&amp;quot;#{public_dir}/**/*.html&amp;quot;), :in_threads=&amp;gt;3) do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Translation: for every &lt;code&gt;.css&lt;/code&gt; or &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.html&lt;/code&gt; file in the target &lt;code&gt;public&lt;/code&gt; directory, or any of its sub-directories, execute the following block of code using 3 threads. Easy!&lt;/p&gt;

&lt;p&gt;Feel free to experiment with the number of threads, or even use processes, but be aware results may very based on the hardware and system particulars this will run on.&lt;/p&gt;

&lt;p&gt;Keeping the tasks separate still allows the level of flexibility enjoyed previously, but is it really necessary to run them one at a time? Let&amp;rsquo;s see what happens if we change the &lt;code&gt;deploy&lt;/code&gt; task to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &amp;quot;Default deploy task&amp;quot;
task :deploy do
  # Check if preview posts exist, which should not be published
  if File.exists?(&amp;quot;.preview-mode&amp;quot;)
    puts &amp;quot;## Found posts in preview mode, regenerating files ...&amp;quot;
    File.delete(&amp;quot;.preview-mode&amp;quot;)
    Rake::Task[:generate].execute
  end

  # Apply minification tasks
  Parallel.map([:minify_css, :minify_js, :minify_html],
               :in_threads =&amp;gt; 3) do |parallel_task|
    Rake::Task[parallel_task].execute
  end

  Rake::Task[:copydot].invoke(source_dir, public_dir)
  Rake::Task[&amp;quot;#{deploy_default}&amp;quot;].execute
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! Same reasoning as before, but rather than distributing a set of files to be processed across 3 threads, this is telling doing the same for 3 separate &lt;code&gt;rake&lt;/code&gt; tasks.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;conclusion:a425d7c31e30382749623fcbe2a12b59&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As mentioned before, do experiment with the number of threads, try processes, see what works best for your hardware. I personally ran into trouble if I tried to spin up too many threads, and switching to processes was even less forgiving.&lt;/p&gt;

&lt;p&gt;Why not take it a step further and see what other standard Octopress &lt;code&gt;rake&lt;/code&gt; tasks are good candidates for parallelisation?&lt;/p&gt;

&lt;p&gt;And if anyone cares to use this (or something similar) on a larger blog, I&amp;rsquo;d love to see benchmarks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Octopress: Minify HTML, CSS and JS</title>
      <link>http://andreimihu.com/blog/2013/11/16/octopress-minify-html-css-and-js/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2013/11/16/octopress-minify-html-css-and-js/</guid>
      <description>

&lt;p&gt;After putting my Octopress site and blog together, I obviously couldn&amp;rsquo;t help tinkering even if I did promise myself not to sink too much time into it. I originally wanted to keep it mostly standard and low maintenance so I could focus on other projects, but cracking it open was just too tempting!&lt;/p&gt;

&lt;p&gt;I am definitely very happy with how it handles most things right out of the box - it&amp;rsquo;s incredibly convenient and works smoothly - but a quick inspection with &lt;a href=&#34;http://developers.google.com/speed/pagespeed/insights/&#34;&gt;PageSpeed Insights&lt;/a&gt; pointed out a few obvious areas where I felt I could make improvements.&lt;/p&gt;

&lt;p&gt;Bring it on!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-basics:02ff334bc0e016942a9a80b00ca47018&#34;&gt;The basics&lt;/h3&gt;

&lt;p&gt;Since the very purpose of using Octopress is to generate a static site, there&amp;rsquo;s already a significant &lt;a href=&#34;http://jason.pureconcepts.net/2013/01/benchmark-octopress-wordpress/&#34;&gt;performance advantage over dynamic engines&lt;/a&gt;. That&amp;rsquo;s a big advantage, but it&amp;rsquo;s only a head start and there&amp;rsquo;s room for better, so I ran through the usual content-independent web optimisations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimise all images, including theme-provided ones.&lt;/strong&gt; A one-off trick (once per image file) that can be a very useful space saver. I used &lt;a href=&#34;http://imageoptim.com/&#34;&gt;ImageOptim&lt;/a&gt; but there are a good few tools that do this well. This process saves as much space as possible &lt;em&gt;without&lt;/em&gt; impacting image quality or introducing compression artefacts. Same quality, smaller size - there&amp;rsquo;s no downside, but many sites neglect to do this!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; This process usually strips image metadata, may or may not mess with colour profiles and so on - again, without impacting visual image quality. If you&amp;rsquo;re serving raw graphics files, use with care!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enable caching on the web server.&lt;/strong&gt; Very basic but it&amp;rsquo;s always a good idea to make sure it&amp;rsquo;s done correctly - case in point, my hosting provider hadn&amp;rsquo;t set up a default configuration so responses had no &lt;code&gt;Cache-Control&lt;/code&gt; header at all! So, I dropped the &lt;code&gt;.htaccess&lt;/code&gt; file below in my root public folder and Apache did the rest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;#### CACHING ####
# 7 DAYS DEFAULT
ExpiresActive On
ExpiresDefault A604800

# 1 MONTH
&amp;lt;FilesMatch &amp;quot;\.(ico|gif|jpe?g|png|flv|pdf|swf|mov|mp3|wmv|ppt)$&amp;quot;&amp;gt;
ExpiresDefault A2419200
Header append Cache-Control &amp;quot;public&amp;quot;
&amp;lt;/FilesMatch&amp;gt;

# 14 DAYS
&amp;lt;FilesMatch &amp;quot;\.(xml|txt|html|htm|js|css)$&amp;quot;&amp;gt;
ExpiresDefault A1209600
Header append Cache-Control &amp;quot;private, must-revalidate&amp;quot;
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Enable gzip compression.&lt;/strong&gt; Another relatively basic one, there are a few ways to do this. It&amp;rsquo;s possible to compress all resources at generation time, as long as the web server is configured to send the correct header to the client. Additionally, it&amp;rsquo;s possible to upload two version of every resource - compressed and uncompressed - and return the correct one to the client based on request headers. I chose a third option and uploaded only uncompressed resources, then let the server worry about it and decide based on request headers whether to compress or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; I may revise this decision later since having both compressed and uncompressed resources readily available eliminates the runtime overhead. That said, &lt;code&gt;runtime compression time + transfer time&lt;/code&gt; still beats &lt;code&gt;uncompressed transfer time&lt;/code&gt; for all but the smallest of resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use external Content Distribution Networks for common resources.&lt;/strong&gt; Basically, &lt;a href=&#34;http://encosia.com/3-reasons-why-you-should-let-google-host-jquery-for-you/&#34;&gt;don&amp;rsquo;t host your own jQuery&lt;/a&gt; or similar. The gist of it is that it allows the client to download common resources from a CDN, which will almost certainly have servers that are faster or geographically closer to the client, and saves bandwidth at the same time. The resource may even already be cached on the client after visiting other sites that use it! All such script declarations in HTML files or template includes should point to externally hosted resources.&lt;/p&gt;

&lt;p&gt;So far so good! These are all generally useful whether using a static site or not, but didn&amp;rsquo;t keep me busy for long.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-good-part:02ff334bc0e016942a9a80b00ca47018&#34;&gt;The good part&lt;/h3&gt;

&lt;p&gt;Because Octopress is built on top of Jekyll, there are a fair few options to choose from to minify or compress resouces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/paolochiodi/htmlcompressor&#34;&gt;Htmlcompressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stereobooster/html_minifier&#34;&gt;HtmlMinifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stereobooster/html_press&#34;&gt;HtmlPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matthiassiegel/cssminify&#34;&gt;CSSminify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matthiassiegel/yuicssmin&#34;&gt;YUICSSMIN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stereobooster/css_press&#34;&gt;css_press&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/donaldducky/jekyll-cssminify&#34;&gt;CssMinify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The list goes on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some are designed for only one resource type, some multiple. Some build on top of others. Many have issues that have been open against them for a good few months, giving me little confidence. Two plugins deserve special mentions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/matthodan/jekyll-asset-pipeline&#34;&gt;Jekyll Asset Pipeline&lt;/a&gt; is one of the most popular and works very well, but I chose not to use it because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It takes some effort to integrate given the slightly different source structure used by Octopress. I did get it working, but it felt a bit cumbersome and I wasn&amp;rsquo;t entirely happy with it.&lt;/li&gt;
&lt;li&gt;Many theme files require some modification to take advantage of the compression and bundling provided. I wanted a solution that would still allow me to swap themes as I see fit without then going into each theme file to make changes, if at all possible.&lt;/li&gt;
&lt;li&gt;Does not handle HTML minification.&lt;/li&gt;
&lt;li&gt;Does not integrate well with Compass, which can also do some level of minification during processing, and is set up to do so in the default config provided by Octopress.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/stereobooster/jekyll-press&#34;&gt;jekyll-press&lt;/a&gt; is the closest to what I wanted, and I may actually go back to using it, but its integration was a bit rough due to some Octopress particularities. Most notably, Octopress invokes Compass as a separate process, both for initial asset generation and when running in preview mode. While this works, I noticed odd results when Jekyll would minify resources on their way to the &lt;code&gt;public&lt;/code&gt; folder and Compass would believe they have been improperly altered after reaching the folder, then generate a fresh copy.&lt;/p&gt;

&lt;p&gt;I toyed with creating my own plugin based on &lt;a href=&#34;https://github.com/stereobooster/jekyll-press&#34;&gt;jekyll-press&lt;/a&gt; using my preferred CSS/JS/HTML minification libraries but ended up abandoning this idea before getting very far with it, again for the reasons above.&lt;/p&gt;

&lt;p&gt;The solution I settled on makes use of the libraries below. These could easily be substituted for pure Ruby solutions, but the underlying Java libraries of the wrappers below are very mature, stable and reliable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sstephenson/ruby-yui-compressor&#34;&gt;Ruby-YUI Compressor&lt;/a&gt; for CSS and JS&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/completelynovel/html_compressor&#34;&gt;html_compressor&lt;/a&gt; for HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, add the following gems to the base &lt;code&gt;Gemfile&lt;/code&gt; Octopress provides:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;yui-compressor&#39;, &#39;~&amp;gt; 0.12.0&#39;
gem &#39;html_compressor&#39;, &#39;~&amp;gt; 0.0.3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include them at the top of the &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;yui/compressor&amp;quot;
require &amp;quot;html_compressor&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add the following as independent tasks in the &lt;code&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &amp;quot;Minify CSS&amp;quot;
task :minify_css do
  puts &amp;quot;## Minifying CSS&amp;quot;
  compressor = YUI::CssCompressor.new
  Dir.glob(&amp;quot;#{public_dir}/**/*.css&amp;quot;).each do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end

desc &amp;quot;Minify JS&amp;quot;
task :minify_js do
  puts &amp;quot;## Minifying JS&amp;quot;
  compressor = YUI::JavaScriptCompressor.new
  Dir.glob(&amp;quot;#{public_dir}/**/*.js&amp;quot;).each do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end

desc &amp;quot;Minify HTML&amp;quot;
task :minify_html do
  puts &amp;quot;## Minifying HTML&amp;quot;
  compressor = HtmlCompressor::HtmlCompressor.new
  Dir.glob(&amp;quot;#{public_dir}/**/*.html&amp;quot;).each do |name|
    puts &amp;quot;Minifying #{name}&amp;quot;
    input = File.read(name)
    output = File.open(&amp;quot;#{name}&amp;quot;, &amp;quot;w&amp;quot;)
    output &amp;lt;&amp;lt; compressor.compress(input)
    output.close
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These tasks can be called individually to minify either CSS, or JS, or HTML.&lt;/p&gt;

&lt;p&gt;The last part is to decide where best to invoke them. I wanted to work with un-minified resources while writing blog posts so I could examine the source without hurting my eyes, so the natural choice seemed to be to minify at publishing time.&lt;/p&gt;

&lt;p&gt;I added the task invocations to the existing &lt;code&gt;deploy&lt;/code&gt; task, which then looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;desc &amp;quot;Default deploy task&amp;quot;
task :deploy do
  # Check if preview posts exist, which should not be published
  if File.exists?(&amp;quot;.preview-mode&amp;quot;)
    puts &amp;quot;## Found posts in preview mode, regenerating files ...&amp;quot;
    File.delete(&amp;quot;.preview-mode&amp;quot;)
    Rake::Task[:generate].execute
  end

  # Apply minification tasks
  Rake::Task[:minify_css].execute
  Rake::Task[:minify_js].execute
  Rake::Task[:minify_html].execute

  Rake::Task[:copydot].invoke(source_dir, public_dir)
  Rake::Task[&amp;quot;#{deploy_default}&amp;quot;].execute
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there it is! Every time the &lt;code&gt;deploy&lt;/code&gt; task is invoked, all resources will be minified in place in the &lt;code&gt;public&lt;/code&gt; folder before &lt;code&gt;rsync&lt;/code&gt; takes over and pushes them to the remote server.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;conclusion:02ff334bc0e016942a9a80b00ca47018&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Octopress is a great tool, no doubt about it. It&amp;rsquo;s quick to get running, has great community support, and a bunch of great themes to get things rolling.&lt;/p&gt;

&lt;p&gt;That said, this experiment has made me briefly consider packing up my toys and moving over to &lt;a href=&#34;http://middlemanapp.com/&#34;&gt;Middleman&lt;/a&gt;. The customisation I attempted would likely have gone smoother and integrated more cleanly, but Octopress remains my blogging tool of choice&amp;hellip; for now!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android: Always embed tabs in ActionBar</title>
      <link>http://andreimihu.com/blog/2013/10/17/android-always-embed-tabs-in-actionbar/</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2013/10/17/android-always-embed-tabs-in-actionbar/</guid>
      <description>

&lt;p&gt;When I chose to use a tab layout alongside the standard Android ActionBar for the home screen of my &lt;a href=&#34;https://github.com/zyro/crunchbased&#34;&gt;CrunchBase app&lt;/a&gt; I found it surprisingly difficult to get the behaviour I wanted: I expected tabs to be embedded in the ActionBar, subject to available space. Not so!&lt;/p&gt;

&lt;p&gt;By default, Android will happily embed tabs into the ActionBar in landscape orientation, if it finds enough room. But in portrait mode they are displayed in their own bar and the large blank space left just above them is ignored.&lt;/p&gt;

&lt;p&gt;I was keen to minimise the screen area used by navigation items, so I set out to find an answer&amp;hellip;&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://andreimihu.com/images/2013-10-17-android-always-embed-tabs-in-actionbar-portrait1.jpg&#34; alt=&#34;Default portrait orientation behaviour&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Default portrait orientation behaviour
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://andreimihu.com/images/2013-10-17-android-always-embed-tabs-in-actionbar-landscape1.jpg&#34; alt=&#34;Default landscape orientation behaviour&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Default landscape orientation behaviour
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;not-so-simple:f96dc23d71453e0d4a2a36aad62d1b65&#34;&gt;Not so simple&lt;/h3&gt;

&lt;p&gt;Unfortunately, my answer comes with a disclaimer of sorts.&lt;/p&gt;

&lt;p&gt;This seems like a rather basic use case and I personally find it surprising the effect is so difficult to achieve. It is clearly not a limitation of the UI elements themselves, since there are no issues in landscape orientation. Whatever the case, this behaviour is clearly by design.&lt;/p&gt;

&lt;p&gt;This means that short of replacing the ActionBar implementation with a more permissive solution, there appears to be no &lt;em&gt;guaranteed&lt;/em&gt; solution.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-code:f96dc23d71453e0d4a2a36aad62d1b65&#34;&gt;The code&lt;/h3&gt;

&lt;p&gt;This has been tested on Android 4.0.3 and above - API level 15+. Here&amp;rsquo;s what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class AwesomeTabbedActivity extends Activity {

    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.awesome_tabbed_layout);
        
        // Standard tabbed navigation setup.
        final ActionBar actionBar = getActionBar();
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
        
        // ...
        // Create tabs, fragments, pager and anything else needed.
        // ...
        
        forceTabs(); // Force tabs when activity starts.
    }
    
    @Override
    public void onConfigurationChanged(final Configuration config) {
        super.onConfigurationChanged(config);
        forceTabs(); // Handle orientation changes.
    }

    // This is where the magic happens!
    public void forceTabs() {
        try {
            final ActionBar actionBar = getActionBar();
            final Method setHasEmbeddedTabsMethod = actionBar.getClass()
                .getDeclaredMethod(&amp;quot;setHasEmbeddedTabs&amp;quot;, boolean.class);
            setHasEmbeddedTabsMethod.setAccessible(true);
            setHasEmbeddedTabsMethod.invoke(actionBar, true);
        }
        catch(final Exception e) {
            // Handle issues as needed: log, warn user, fallback etc
            // This error is safe to ignore, standard tabs will appear.
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! The tabs are now embedded in the ActionBar in portrait mode, while landscape orientation still works as expected. If there is insufficient space, the tabs will stack into a neat drop-down menu.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://andreimihu.com/images/2013-10-17-android-always-embed-tabs-in-actionbar-portrait2.jpg&#34; alt=&#34;Portrait with enough room&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Portrait with enough room
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://andreimihu.com/images/2013-10-17-android-always-embed-tabs-in-actionbar-portrait3.jpg&#34; alt=&#34;Portrait with drop-down tabs&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Portrait with drop-down tabs
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;limitations:f96dc23d71453e0d4a2a36aad62d1b65&#34;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;As with any circumvention of intended behaviour via reflection, this is not guaranteed to work on every combination of device and software, especially given Android&amp;rsquo;s fragmented ecosystem.&lt;/p&gt;

&lt;p&gt;Testing yielded promising results, with only one minor issue. On some devices the active tab indicator, or the active item in the tab drop-down if the tab list has been collapsed, may not be updated correctly if you have a &lt;code&gt;ViewPager&lt;/code&gt; configured to allow you to swipe between tabs.&lt;/p&gt;

&lt;p&gt;There is also a chance that in some future API version the &lt;code&gt;setHasEmbeddedTabs&lt;/code&gt; method being invoked reflectively will be renamed, moved or removed entirely, rendering the code snippet above ineffective.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;conclusion:f96dc23d71453e0d4a2a36aad62d1b65&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Despite these drawbacks, in this scenario reflection is still the most reliable option that does not involve bringing in external libraries.&lt;/p&gt;

&lt;p&gt;This issue definitely proved an interesting insight into Android UI code and its inner workings, even if I eventually decided against applying this solution to the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.zyro.crunchbased&#34;&gt;released version of my app&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>