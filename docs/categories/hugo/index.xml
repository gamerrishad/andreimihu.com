<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Always a Work in Progress</title>
    <link>http://andreimihu.com/categories/hugo/</link>
    <description>Recent content in Hugo on Always a Work in Progress</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Aug 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://andreimihu.com/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Goodbye Octopress, Hello Hugo!</title>
      <link>http://andreimihu.com/blog/2014/08/11/goodbye-octopress-hello-hugo/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://andreimihu.com/blog/2014/08/11/goodbye-octopress-hello-hugo/</guid>
      <description>

&lt;p&gt;When I first set up my little site and blog I had a look around at solutions that would meet a few simple requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Easy to set up.&lt;/strong&gt; I didn&amp;rsquo;t want to dedicate a big chunk of time to get it running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to keep going.&lt;/strong&gt; Even more than the first point, I didn&amp;rsquo;t want a huge ongoing maintenance burden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compact and fast.&lt;/strong&gt; There&amp;rsquo;s a lot I can say about either of these points, but the basic idea was to have a snappy site with quick load times and low hosting costs.&lt;/li&gt;
&lt;li&gt;A number of other things like offline writing and testing, simple uploading of new posts and site changes, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Static site generators easily ticked all of the boxes: offline writing, &lt;code&gt;rsync&lt;/code&gt; for deployment, no backend to run on the server, pages load as fast as you can deliver a text file etc - sounds like a dream! &lt;a href=&#34;http://staticsitegenerators.net/&#34;&gt;The choices are staggering, too!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bit more searching and I ended up with &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; and its many skins, plugins and helpful tutorials. A day&amp;rsquo;s work or so and I was up and running. It was a smooth process, easy to deploy and get things looking as I wanted.&lt;/p&gt;

&lt;p&gt;So far so good! So what made me switch to &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; less than a year later?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;unconvincing-update-story:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Unconvincing update story&lt;/h3&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just me, but it seems wrong for the standard site setup to involve forking the &lt;a href=&#34;https://github.com/imathis/octopress&#34;&gt;main Octopress repo&lt;/a&gt; and every now and again merging from upstream to stay up to date. You &lt;em&gt;should&lt;/em&gt; be fine if you don&amp;rsquo;t touch any of the standard files and edit only your pages - but this adds an artificial barrier to tweaking behaviour, since the only way to tie in your own &lt;code&gt;rake&lt;/code&gt; tasks is to crack open the &lt;code&gt;Rakefile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also non-trivial to override theme behaviour. There&amp;rsquo;s a recommended way to organise your overrides, but since the theme is cloned elsewhere, then copied to your &lt;code&gt;source&lt;/code&gt; path, it&amp;rsquo;s all too easy to edit those files instead. Then the built-in update process backs up your sources, gives you new ones, then tries to copy your content and overrides back in? I&amp;rsquo;m afraid they lost me partway through - maybe I went wrong somewhere, but it would be a bit more manageable if they&amp;rsquo;d given me a bit less rope, so to speak.&lt;/p&gt;

&lt;p&gt;This is where it started failing the &lt;strong&gt;easy to keep going&lt;/strong&gt; criteria, and I started having doubts.&lt;/p&gt;

&lt;h3 id=&#34;ruby-gems-headache:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Ruby gems headache&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m not a Ruby developer, but I&amp;rsquo;ve been quite impressed with how quick it is to pick up and start hacking with. I can see why a lot of really neat tools and libraries are Ruby-based, and I&amp;rsquo;d happily use them more often. But the &lt;code&gt;gem&lt;/code&gt; system has let me down.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had to set up and work with a number of Ruby projects, and I started getting issues with gem versions being incorrect. Globally installed, &lt;em&gt;versioned&lt;/em&gt; dependencies strike me as a bad idea, to be honest. What should be relatively small, single-purpose, &lt;em&gt;isolated&lt;/em&gt; batch tools are now fighting to control the state of these resources in a shared space. I&amp;rsquo;ve had some success using &lt;code&gt;exec&lt;/code&gt; but it&amp;rsquo;s still an unnecessary overhead.&lt;/p&gt;

&lt;p&gt;In a strange way this came back around to being &lt;strong&gt;easy to set up&lt;/strong&gt;. After a different project updated some gems, Octopress was refusing to run. In fact, any Ruby-based site generator would have probably failed me here.&lt;/p&gt;

&lt;h3 id=&#34;cluttered-internals:032bd4c0603e4ff69cfd46ef9e8cb427&#34;&gt;Cluttered internals&lt;/h3&gt;

&lt;p&gt;Octopress isn&amp;rsquo;t so much a tool as a collection of tools tied together through &lt;code&gt;rake&lt;/code&gt; tasks. This works well up to a point. But then I noticed that whenever the &lt;code&gt;watch&lt;/code&gt; task was stopped, it would sometimes fail to stop its child &lt;code&gt;compass&lt;/code&gt; process - one example of many.&lt;/p&gt;

&lt;p&gt;In my previous blog posts I experimented with plugins to modify behaviour at site generation time. There&amp;rsquo;s nothing more frustrating than finding you can&amp;rsquo;t change some specific pattern because of the way Octopress calls the process responsible for that resource.&lt;/p&gt;

&lt;p&gt;From my own experience I&amp;rsquo;ve found it&amp;rsquo;s usually far more manageable to have a single plugin-friendly tool doing the work, rather than coordinating a set of processes. &lt;strong&gt;Easy to set up&lt;/strong&gt; and &lt;strong&gt;easy to keep going&lt;/strong&gt; are both looking increasingly shaky.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In contrast to my points above &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much faster - the Go implementation has an easily visible impact.&lt;/li&gt;
&lt;li&gt;No dependencies to sort out and keep in line.&lt;/li&gt;
&lt;li&gt;More opinionated theme integration approach and project structure - it was very easy to set up &lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;Hyde-X&lt;/a&gt;, my own theme variant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, I have to admit I miss a few things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The abundance of plugins and pipeline tools.&lt;/li&gt;
&lt;li&gt;The variety of themes.&lt;/li&gt;
&lt;li&gt;The community resources.&lt;/li&gt;
&lt;li&gt;Pagination, which I find to be a strange omission.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo is far from perfect, but so far I like how it&amp;rsquo;s shaping up. I&amp;rsquo;ll probably write a follow-up blog post at some point down the line after I&amp;rsquo;ve lived with it for a while, and we&amp;rsquo;ll see if I&amp;rsquo;m still as enthusiastic about it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>